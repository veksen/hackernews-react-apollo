"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var Environment_1 = require("./Environment");
var Output_1 = require("./Output");
var Config_1 = require("./Config");
// lets write some tests
function makeEnvironment() {
    var config = new Config_1.Config();
    var out = new Output_1.Output(config);
    return new Environment_1.Environment(out, config);
}
describe('environment', function () {
    test('should work without global RC', function () { return __awaiter(_this, void 0, void 0, function () {
        var env, localFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    env = makeEnvironment();
                    localFile = "\nplatformToken: 'secret-token'\ntargets:\n  dev: local/asdasd123\nclusters:\n  local:\n    host: http://localhost:60000\n    token: asdf\n";
                    return [4 /*yield*/, env.loadRCs(localFile, null)];
                case 1:
                    _a.sent();
                    expect(env.rc).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('should resolve a target alias refering before', function () { return __awaiter(_this, void 0, void 0, function () {
        var env, localFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    env = makeEnvironment();
                    localFile = "\nplatformToken: 'secret-token'\ntargets:\n  dev: local/asdasd123\n  test-alias: dev\nclusters:\n  local:\n    host: http://localhost:60000\n    token: asdf\n";
                    return [4 /*yield*/, env.loadRCs(localFile, null)];
                case 1:
                    _a.sent();
                    expect(env.rc).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('should resolve a target alias refering after', function () { return __awaiter(_this, void 0, void 0, function () {
        var env, localFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    env = makeEnvironment();
                    localFile = "\nplatformToken: 'secret-token'\ntargets:\n  test-alias: dev\n  dev: local/asdasd123\nclusters:\n  local:\n    host: http://localhost:60000\n    token: asdf\n";
                    return [4 /*yield*/, env.loadRCs(localFile, null)];
                case 1:
                    _a.sent();
                    expect(env.rc).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    //
    //   test('throws when cluster does not exist', async () => {
    //     const env = makeEnvironment()
    //     const localFile = `
    // platformToken: 'secret-token'
    // targets:
    //   dev: local/asdasd123
    // `
    //     env.loadRCs(localFile, null)
    //     await expect(env.out.stderr.output).toMatch(/Could not find cluster local defined for target dev in/)
    //   })
    test('should access targets from the global RC', function () { return __awaiter(_this, void 0, void 0, function () {
        var env, localFile, globalFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    env = makeEnvironment();
                    localFile = "\nplatformToken: 'secret-token'\ntargets:\n  test-alias: dev\n  dev: local/asdasd123\n";
                    globalFile = "\nclusters:\n  local:\n    host: http://localhost:60000\n    token: asdf\n    ";
                    return [4 /*yield*/, env.loadRCs(localFile, globalFile)];
                case 1:
                    _a.sent();
                    expect(env.rc).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('should resolve target from the global RC', function () { return __awaiter(_this, void 0, void 0, function () {
        var env, localFile, globalFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    env = makeEnvironment();
                    localFile = "\nplatformToken: 'secret-token'\ntargets:\n  test-alias: dev\n";
                    globalFile = "\ntargets:\n  dev: local/asdasd123\nclusters:\n  local:\n    host: http://localhost:60000\n    token: asdf\n    ";
                    return [4 /*yield*/, env.loadRCs(localFile, globalFile)];
                case 1:
                    _a.sent();
                    expect(env.rc).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('should override global target', function () { return __awaiter(_this, void 0, void 0, function () {
        var env, localFile, globalFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    env = makeEnvironment();
                    localFile = "\nplatformToken: 'secret-token'\ntargets:\n  dev: shared-eu-west-1/asdfasdf\n";
                    globalFile = "\ntargets:\n  dev: local/asdasd123\nclusters:\n  local:\n    host: http://localhost:60000\n    token: asdf\n    ";
                    return [4 /*yield*/, env.loadRCs(localFile, globalFile)];
                case 1:
                    _a.sent();
                    expect(env.rc).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=Environment.test.js.map