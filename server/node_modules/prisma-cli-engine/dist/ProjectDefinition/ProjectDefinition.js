"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fsToProject_1 = require("./fsToProject");
var projectToFs_1 = require("./projectToFs");
var path = require("path");
var yaml_1 = require("./yaml");
var chalk_1 = require("chalk");
var fs_1 = require("../fs");
var lodash_1 = require("lodash");
var yamlParser = require("yaml-ast-parser");
var yaml = require("js-yaml");
var builtin_modules_1 = require("./builtin-modules");
var debug = require('debug')('project-definition');
var ProjectDefinitionClass = (function () {
    function ProjectDefinitionClass(out, config) {
        this.args = {};
        this.out = out;
        this.config = config;
    }
    ProjectDefinitionClass.sanitizeDefinition = function (definition) {
        var modules = definition.modules.map(function (module) {
            var name = module.name, files = module.files, externalFiles = module.externalFiles;
            var content = module.content;
            if (module.definition && typeof module.definition === 'object') {
                // parse + stringify trims away `undefined` values, which are not accepted by the yaml parser
                if (Array.isArray(module.definition.types)) {
                    module.definition.types = module.definition.types[0];
                }
                content = yaml.safeDump(JSON.parse(JSON.stringify(module.definition)));
            }
            return { name: name, content: content, files: files, externalFiles: externalFiles };
        });
        return { modules: modules };
    };
    ProjectDefinitionClass.prototype.load = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, definitionJsonPath;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.args = args;
                        if (!(this.config.definitionPath &&
                            fs_1.default.pathExistsSync(this.config.definitionPath))) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, fsToProject_1.fsToProject(this.config.definitionDir, this.out, args)];
                    case 1:
                        _a.definition = _b.sent();
                        if (process.env.GRAPHCOOL_DUMP_LOADED_DEFINITION) {
                            definitionJsonPath = path.join(this.config.definitionDir, 'loaded-definition.json');
                            fs_1.default.writeFileSync(definitionJsonPath, JSON.stringify(this.definition, null, 2));
                        }
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ProjectDefinitionClass.prototype.save = function (files, silent) {
        return __awaiter(this, void 0, void 0, function () {
            var definitionJsonPath;
            return __generator(this, function (_a) {
                projectToFs_1.projectToFs(this.definition, this.config.definitionDir, this.out, files, silent);
                if (process.env.GRAPHCOOL_DUMP_SAVED_DEFINITION) {
                    definitionJsonPath = path.join(this.config.definitionDir, 'definition.json');
                    fs_1.default.writeFileSync(definitionJsonPath, JSON.stringify(this.definition, null, 2));
                }
                return [2 /*return*/];
            });
        });
    };
    ProjectDefinitionClass.prototype.saveTypes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var definition, types;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, yaml_1.readDefinition(this.definition.modules[0].content, this.out, this.config.definitionPath, this.args)];
                    case 1:
                        definition = _a.sent();
                        types = this.definition.modules[0].files[definition.types[0]];
                        this.out.log(chalk_1.default.blue("Written " + definition.types));
                        fs_1.default.writeFileSync(path.join(this.config.definitionDir, definition.types[0]), types);
                        return [2 /*return*/];
                }
            });
        });
    };
    ProjectDefinitionClass.prototype.set = function (definition) {
        this.definition = definition;
    };
    ProjectDefinitionClass.prototype.getFunctionAndModule = function (name) {
        if (this.definition && this.definition.modules) {
            var functions = lodash_1.flatMap(this.definition.modules, function (m) {
                return m.definition && m.definition.functions
                    ? m.definition.functions
                    : [];
            });
            var module_1 = this.definition.modules.find(function (m) {
                return (m.definition &&
                    m.definition.functions &&
                    Object.keys(m.definition.functions).includes(name)) ||
                    false;
            });
            if (module_1) {
                return {
                    module: module_1,
                    fn: module_1.definition.functions[name],
                };
            }
        }
        return null;
    };
    ProjectDefinitionClass.prototype.insertModule = function (moduleName, relativePath) {
        var file = this.definition.modules[0].content;
        var insertion = "\n  " + moduleName + ": " + relativePath;
        return this.insertToDefinition(file, 'modules', insertion);
    };
    ProjectDefinitionClass.prototype.comment = function (str) {
        return str
            .split('\n')
            .map(function (l) { return "# " + l; })
            .join('\n');
    };
    ProjectDefinitionClass.prototype.addTemplateNotes = function (str, templateName) {
        return ("\n# added by " + templateName + " template: (please uncomment)\n" +
            str +
            '\n\n');
    };
    ProjectDefinitionClass.prototype.mergeDefinition = function (newDefinitionYaml, templateName, useComments) {
        var _this = this;
        if (useComments === void 0) { useComments = true; }
        var newDefinition = this.definition.modules[0].content;
        var newYaml = yamlParser.safeLoad(newDefinitionYaml);
        var whiteList = ['functions', 'permissions'];
        newYaml.mappings
            .filter(function (m) { return whiteList.includes(m.key.value); })
            .forEach(function (mapping) {
            var key = mapping.key.value;
            var beginning = _this.getBeginningPosition(newDefinition, key);
            var values = _this.extractValues(newDefinitionYaml, newYaml, key, beginning > -1);
            values = useComments ? _this.comment(values) : values;
            values = _this.addTemplateNotes(values, templateName);
            beginning = beginning === -1 ? newDefinition.length - 1 : beginning;
            newDefinition =
                newDefinition.slice(0, beginning + 1) +
                    values +
                    newDefinition.slice(beginning + 1);
        });
        return newDefinition;
    };
    ProjectDefinitionClass.prototype.mergeTypes = function (newTypes, templateName) {
        var typesPath = this.definition.modules[0].definition.types;
        typesPath = Array.isArray(typesPath) ? typesPath[0] : typesPath;
        var oldTypes = this.definition.modules[0].files[typesPath];
        return (oldTypes + this.addTemplateNotes(this.comment(newTypes), templateName));
    };
    ProjectDefinitionClass.prototype.checkNodeModules = function (throwError) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var definitionFile, json, functions, functionsWithRequire, imports, text;
            return __generator(this, function (_a) {
                if (!this.config.definitionPath) {
                    this.out.error('Could not find graphcool.yml');
                }
                definitionFile = fs_1.default.readFileSync(this.config.definitionPath, 'utf-8');
                json = yaml.safeLoad(definitionFile);
                functions = this.extractFunctions(json.functions);
                functionsWithRequire = functions.reduce(function (acc, fn) {
                    var src = typeof fn.fn.handler.code === 'string'
                        ? fn.fn.handler.code
                        : fn.fn.handler.code.src;
                    if (!fs_1.default.pathExistsSync(src)) {
                        _this.out.error("Error for function handler " + chalk_1.default.bold(fn.name) + ": File " + chalk_1.default.bold(src) + " doesn't exist.");
                    }
                    var file = fs_1.default.readFileSync(src, 'utf-8');
                    var requireRegex = /(?:(?:var|const)\s*([\s\S]*?)\s*=\s*)?require\(['"]([^'"]+)['"](?:, ['"]([^'"]+)['"])?\);?/;
                    var importRegex = /\bimport\s+(?:[\s\S]+\s+from\s+)?[\'"]([^"\']+)["\']/;
                    var statements = file.split('\n').reduce(function (racc, line, index) {
                        var requireMatch = requireRegex.exec(line);
                        var importMatch = importRegex.exec(line);
                        if (requireMatch || importMatch) {
                            var srcPath = requireMatch ? requireMatch[1] : importMatch[1];
                            if (srcPath) {
                                if (!builtin_modules_1.builtinModules.includes(srcPath) &&
                                    !srcPath.startsWith('./')) {
                                    var result = {
                                        line: line,
                                        index: index + 1,
                                        srcPath: srcPath,
                                    };
                                    return racc.concat(result);
                                }
                            }
                        }
                        return racc;
                    }, []);
                    if (statements.length > 0) {
                        return acc.concat({
                            statements: statements,
                            fn: fn,
                            src: src,
                        });
                    }
                    return acc;
                }, []);
                if (functionsWithRequire.length > 0) {
                    if (!fs_1.default.pathExistsSync(path.join(this.config.definitionDir, 'node_modules'))) {
                        imports = functionsWithRequire
                            .map(function (fn) {
                            return (chalk_1.default.bold(fn.fn.name) + " (" + fn.src + "):\n" +
                                fn.statements
                                    .map(function (s) { return "  " + s.index + ": " + chalk_1.default.dim(s.line); })
                                    .join('\n'));
                        })
                            .join('\n');
                        text = "You have import/require statements in your functions without a node_modules folder:\n" + imports + "\n\nPlease make sure you specified all needed dependencies in your package.json and run npm install.";
                        if (throwError) {
                            this.out.error(text);
                        }
                        else {
                            this.out.warn(text);
                        }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    ProjectDefinitionClass.prototype.injectEnvironmentToFile = function (file, environment) {
        // get first function line
        var lines = file.split('\n');
        Object.keys(environment).forEach(function (key) {
            var envVar = environment[key];
            lines.splice(0, 0, "process.env['" + key + "'] = '" + envVar + "';");
        });
        return lines.join('\n');
    };
    ProjectDefinitionClass.prototype.insertToDefinition = function (file, key, insertion) {
        var obj = yamlParser.safeLoad(file);
        var mapping = obj.mappings.find(function (m) { return m.key.value === key; });
        var end = mapping.endPosition;
        var newFile = file.slice(0, end) + insertion + file.slice(end);
        var valueStart = mapping.value.startPosition;
        var valueEnd = mapping.value.endPosition;
        if (mapping.value && valueEnd - valueStart < 4) {
            return newFile.slice(0, valueStart) + newFile.slice(valueEnd);
        }
        return file;
    };
    ProjectDefinitionClass.prototype.extractValues = function (file, obj, key, valuesOnly) {
        var mapping = obj.mappings.find(function (m) { return m.key.value === key; });
        if (!mapping) {
            this.out.error("Could not find mapping for key " + key);
        }
        var start = valuesOnly
            ? mapping.key.endPosition + 1
            : mapping.startPosition;
        return file.slice(start, mapping.endPosition);
    };
    ProjectDefinitionClass.prototype.getBeginningPosition = function (file, key) {
        var obj = yamlParser.safeLoad(file);
        var mapping = obj.mappings.find(function (m) { return m.key.value === key; });
        return mapping ? mapping.key.endPosition + 1 : -1;
    };
    Object.defineProperty(ProjectDefinitionClass.prototype, "functions", {
        get: function () {
            if (!this.definition) {
                return [];
            }
            return this.extractFunctions(this.definition.modules[0].definition.functions);
        },
        enumerable: true,
        configurable: true
    });
    ProjectDefinitionClass.prototype.extractFunctions = function (functions) {
        if (!functions) {
            return [];
        }
        else {
            return Object.keys(functions)
                .filter(function (name) { return functions[name].handler.code; })
                .map(function (name) {
                return {
                    name: name,
                    fn: functions[name],
                };
            });
        }
    };
    return ProjectDefinitionClass;
}());
exports.ProjectDefinitionClass = ProjectDefinitionClass;
//# sourceMappingURL=ProjectDefinition.js.map