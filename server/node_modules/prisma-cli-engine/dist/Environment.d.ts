import { Output } from './Output/index';
import { Config } from './Config';
import { Cluster, InternalRC, RC, Target, Targets } from './types/rc';
import { Args, Region } from './types/common';
export declare class Environment {
    localRC: InternalRC;
    globalRC: InternalRC;
    out: Output;
    config: Config;
    args: Args;
    activeCluster: string;
    warningCache: {
        [key: string]: boolean;
    };
    constructor(out: Output, config: Config);
    readonly rc: RC;
    readonly token: string;
    readonly default: Target | null;
    readonly allClusters: string[];
    checkCluster(cluster: string): void;
    setLocalTarget(name: string, value: string): void;
    setLocalDefaultTarget(value: string): void;
    getTarget(targetName?: string, silent?: boolean): Target;
    getTargetWithName(targetName?: string): {
        target: Target | null;
        targetName: string | null;
    };
    getDefaultTargetName(cluster: string): string;
    setActiveCluster(cluster: string): void;
    isSharedCluster(cluster: string): boolean;
    deleteIfExist(serviceIds: string[]): void;
    /**
     * This is used to migrate the old .graphcool and .graphcoolrc to the new format
     */
    migrateOldFormat(): void;
    migrateLocalFile(): void;
    migrateClusters(rcPath: string): void;
    migrateGlobalFiles(): void;
    loadYaml(file: string | null, filePath?: string | null): Promise<any>;
    load(args: Args): Promise<void>;
    loadRCs(localFile: string | null, globalFile: string | null, args?: Args): Promise<void>;
    deserializeRCs(localFile: any, globalFile: any, localFilePath: string | null, globalFilePath: string | null): RC;
    checkClusters(targets: Targets, clusters: string[], filePath: string | null): void;
    deserializeTargets(targets: {
        [key: string]: string;
    }, filePath: string | null): Targets;
    deserializeTarget(target: string, filePath?: string | null): Target;
    resolveTargetAliases: (targets: any, allTargets: any) => any;
    isTargetAlias: (target: string | Target) => boolean;
    resolveTarget: (target: string, targets: {
        [key: string]: string;
    }) => string;
    serializeRC(rc: InternalRC): string;
    setToken(token: string | undefined): void;
    saveLocalRC(): void;
    saveGlobalRC(): void;
    save(): void;
    setGlobalCluster(name: string, cluster: Cluster): void;
    setLocalDefaultCluster(cluster: string): void;
    getRegionFromCluster(cluster: string): Region;
    readonly clusterEndpoint: string;
    simpleEndpoint(projectId: string): string;
    importEndpoint(projectId: string): string;
    exportEndpoint(projectId: string): string;
    relayEndpoint(projectId: string): string;
    fileEndpoint(projectId: string): string;
    subscriptionEndpoint(projectId: string): string;
    private setTestToken();
    private subscriptionURL;
}
